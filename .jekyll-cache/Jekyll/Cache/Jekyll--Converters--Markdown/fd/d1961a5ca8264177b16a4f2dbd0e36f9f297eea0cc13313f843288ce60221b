I"}I<p>각 컴포넌트 역할에 맞춰 컴포넌트 기능을 구현해 보겠습니다. 컴포넌트별로 구현할 기능은 아래와 같습니다.</p>

<ul>
  <li>TodoHeader: 애플리케이션 이름 표시</li>
  <li>TodoInput: 할 일 입력 및 추가</li>
  <li>TodoList: 할 일 목록 표시 및 특정 할 일 삭제</li>
  <li>TodoFooter: 할 일 모두 삭제</li>
</ul>

<h1 id="애플리케이션-제목을-보여주는-todoheader-컴포넌트">애플리케이션 제목을 보여주는 TodoHeader 컴포넌트</h1>

<h2 id="애플리케이션-제목-추가">애플리케이션 제목 추가</h2>

<p>어떤 애플리케이션인지 파악하기 쉽게 애플리케이션 제목을 추가하겠습니다. <code class="language-plaintext highlighter-rouge">&lt;div&gt;</code> 태그를 삭제하고 <code class="language-plaintext highlighter-rouge">&lt;header&gt;</code> 와 <code class="language-plaintext highlighter-rouge">&lt;h1&gt;</code> 태그를 활용하여 아래처럼 제목을 표시합니다.</p>

<h3 id="todoheader-컴포넌트의-template-내용">TodoHeader 컴포넌트의 <code class="language-plaintext highlighter-rouge">&lt;template&gt;</code> 내용</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;template&gt;
    &lt;header&gt;
        &lt;h1&gt;TODO it!&lt;/h1&gt;
    &lt;/header&gt;
&lt;/template&gt;
</code></pre></div></div>

<h2 id="css로-제목-꾸미기">CSS로 제목 꾸미기</h2>

<p>제목 스타일링을 위해 최상위 컴포넌트의 App.vue와 TodoHeader.vue에 다음과 같이 CSS를 추가합니다.</p>

<h3 id="appvue의-css-스타일">App.vue의 CSS 스타일</h3>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nt">style</span><span class="o">&gt;</span>
    <span class="nt">body</span> <span class="p">{</span>
        <span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
        <span class="nl">background-color</span><span class="p">:</span> <span class="m">#F6F6F8</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nt">input</span> <span class="p">{</span>
        <span class="nl">border-style</span><span class="p">:</span> <span class="nb">groove</span><span class="p">;</span>
        <span class="nl">width</span><span class="p">:</span> <span class="m">200px</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nt">button</span> <span class="p">{</span>
        <span class="nl">border-style</span><span class="p">:</span> <span class="nb">groove</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nc">.shadow</span> <span class="p">{</span>
        <span class="nl">box-shadow</span><span class="p">:</span> <span class="m">5px</span> <span class="m">10px</span> <span class="m">10px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.03</span><span class="p">)</span>
    <span class="p">}</span>
<span class="o">&lt;/</span><span class="nt">style</span><span class="o">&gt;</span>
</code></pre></div></div>

<h3 id="todoheadervue의-css-스타일">TodoHeader.vue의 CSS 스타일</h3>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nt">style</span> <span class="nt">scoped</span><span class="o">&gt;</span>
    <span class="nt">h1</span> <span class="p">{</span>
        <span class="nl">color</span><span class="p">:</span> <span class="m">#2F3B52</span><span class="p">;</span>
        <span class="nl">font-weight</span><span class="p">:</span> <span class="m">900</span><span class="p">;</span>
        <span class="nl">margin</span><span class="p">:</span> <span class="m">2.5rem</span> <span class="m">0</span> <span class="m">1.5rem</span><span class="p">;</span>
    <span class="p">}</span>
<span class="o">&lt;/</span><span class="nt">style</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>App.vue와 TodoHeader.vue에 추가한 스타일의 역할은 각각 다음과 같습니다.</p>

<hr />

<p><strong>background-color</strong>: 애플리케이션 전체의 배경 색을 꾸미기 위해 지정</p>

<p><strong>text-align</strong>: 애플리케이션 전체에서 사용하는 텍스트의 정렬 방식을 선택</p>

<p><strong>border-style</strong>: 할 일을 입력하는 인풋 박스의 테두리 모양을 정의</p>

<p><strong>box-shadow</strong>: 할 일을 입력하는 인풋 박스와 할 일 아이템의 아래 그림자 정의</p>

<p><strong>color</strong>: 애플리케이션 제목의 텍스트 색깔을 지정</p>

<p><strong>font-weight</strong>: 애플리케이션 제목의 텍스트 굵기를 지정</p>

<p><strong>margin</strong>: 애플리케이션 제목의 텍스트 여백을 지정</p>

<hr />

<p><code class="language-plaintext highlighter-rouge">&lt;style&gt;</code> 태그에 사용된 scoped는 뷰에서 지원하는 속성이며, 스타일 정의를 해당 컴포넌트에만 적용하겠다는 의미입니다.</p>

<p>앞 코그의 실행 결과는 아래와 같습니다.</p>

<h3 id="todoheader-컴포넌트-등록-결과">TodoHeader 컴포넌트 등록 결과</h3>

<p><img src="/images/todoheader.PNG" alt="todoheader" /></p>

<hr />

<h1 id="할-일을-입력하는-todoinput-컴포넌트">할 일을 입력하는 TodoInput 컴포넌트</h1>

<h2 id="인풋-박스와-버튼-추가">인풋 박스와 버튼 추가</h2>

<p>텍스트 값을 입력받기 위한 <code class="language-plaintext highlighter-rouge">&lt;input&gt;</code> 태그와 텍스트 값을 저장하기 위한 <code class="language-plaintext highlighter-rouge">&lt;button&gt;</code> 태그를 추가합니다. <code class="language-plaintext highlighter-rouge">&lt;button&gt;</code> 태그의 이름은 “추가”로 지정합니다. 태그를 추가하면 화면에서 input 텍스트가 있던 자리에 인풋 박스와 버튼이 생깁니다. 인풋 박스에 텍스트를 입력했을 때 뷰 인스턴스에서 텍스트 값을 인식할 수 있게 v-model 디렉티브와 데이터 속성 newTodoItem을 다음과 같이 추가합니다.</p>

<h3 id="인풋-박스에-v-model-디렉티브와-data-속성을-추가한-todoinput-컴포넌트-코드">인풋 박스에 v-model 디렉티브와 data 속성을 추가한 TodoInput 컴포넌트 코드</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;template&gt;
    &lt;div&gt;
        &lt;input type="text" v-model="newTodoItem"&gt;
        &lt;button&gt;추가&lt;/button&gt;
    &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
    data() {
        return {
            newTodoItem: ''
        }
    }
}
&lt;/script&gt;
</code></pre></div></div>

<p>위 코드를 실행한 후 뷰 개발자 도구를 엽니다. 뷰 개발자 도구에서 “components” 탭의 <code class="language-plaintext highlighter-rouge">&lt;app&gt;</code> 아래 있는 <code class="language-plaintext highlighter-rouge">&lt;TodoInput&gt;</code> 부분을 클릭하면 newTodoItem의 값이 ““로 되어 있습니다. 인풋 박스에 Hello라는 텍스트를 입력하면서 newTodoItem의 값을 지켜보면 텍스트를 입력함에 따라 newTodoItem의 값도 갱신되는 것을 확인할 수 있습니다.</p>

<h3 id="인풋-박스의-입력-값에-따라-갱신되는-newtodoitem-데이터">인풋 박스의 입력 값에 따라 갱신되는 newTodoItem 데이터</h3>

<p><img src="/images/todoinput.PNG" alt="todoinput" /></p>

<h2 id="텍스트를-저장하기-위한-버튼-이벤트">텍스트를 저장하기 위한 버튼 이벤트</h2>

<p>뷰에서 인식한 인풋 박스에 입력된 텍스트 값을 데이터 저장소인 로컬 스토리지에 저장하겠습니다. [추가] 버튼을 클릭했을 때 특정 동작을 수행할 수 있게 v-on:click에 버튼 이벤트 addTodo를 지정합니다. 버튼 이벤트 addTodo()의 로직은 methods에 정의합니다.</p>

<h3 id="버튼-클릭-이벤트-addtodo를-추가한-코드">버튼 클릭 이벤트 addTodo를 추가한 코드</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;template&gt;
    &lt;div&gt;
        &lt;input type="text" v-model="newTodoItem"&gt;
        &lt;button v-on:click="addTodo"&gt;추가&lt;/button&gt;
    &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
    data() {
        return {
            newTodoItem: ''
        }
    },
    methods: {
        addTodo() {
            console.log(this.newTodoItem);
        }
    }
}
&lt;/script&gt;
</code></pre></div></div>

<p>버튼이 정상적을 동작하는지 확인하기 위해 인풋 박스에 입력된 텍스트 데이터(newTodoItem)를 console.log()로 출력해 보겠습니다. 인풋 박스에 Do it을 입력하고 [추가] 버튼을 클릭하면 다음과 같이 콘솔에 텍스트 값이 표시됩니다.</p>

<p>여기서 this.newTodoItem의 this는 해당 컴포넌트를 가리킵니다. 즉, 여기서는 인스턴스 자체로 컴포넌트인 TodoInput.vue를 가리킵니다.</p>

<h3 id="콘솔-로그로-입력된-텍스트를-출력한-화면">콘솔 로그로 입력된 텍스트를 출력한 화면</h3>

<p><img src="/images/todoconsole.PNG" alt="todoconsole" /></p>

<h2 id="입력받은-텍스트를-로컬-스토리지에-저장">입력받은 텍스트를 로컬 스토리지에 저장</h2>

<p>버튼 이벤트가 제대로 동작하는 것을 확인했으니 입력받은 텍스트를 로컬 스토리지의 setItem() API를 이용하여 저장합니다. setItem()는 로컬 스토리지에 데이터를 추가하는 API입니다. API 형식은 키, 값 형태입니다.</p>

<h3 id="localstoragesetitem-코드">localStorage.setItem() 코드</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>methods: {
    addTodo() {
        localStorage.setItem(this.newTodoItem, this.newTodoItem);
    }
}
</code></pre></div></div>

<p>methods의 내용을 위와 같이 변경합니다. 인풋 박스에 Do it을 입력하고 [추가] 버튼을 클릭하면 로컬 스토리지에 텍스트 값이 저장됩니다. 로컬 스토리지에 저장된 것을 확인하려면 크롬 개발자 도구의 [Application -&gt; Local Storage -&gt; http://localhost:8080]를 클릭해 확인합니다.</p>

<h3 id="로컬-스토리지에-인풋-박스의-텍스트를-저장한-화면">로컬 스토리지에 인풋 박스의 텍스트를 저장한 화면</h3>

<p><img src="/images/todosetitem.PNG" alt="todosetitem" /></p>

<h2 id="addtodo-안에-예외-처리-코드-넣기">addTodo() 안에 예외 처리 코드 넣기</h2>

<p>인풋 박스에 입력된 텍스트가 없을 경우 로컬 스토리지에 데이터가 저장되지 않게 예외 처리 코드를 추가하겠습니다. 기존의 addTodo() 메서드를 아래와 같이 변경합니다.</p>

<h3 id="addtodo와-clearinput-코드">addTodo()와 clearInput() 코드</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>methods: {
    addTodo() {
        if(this.newTodoItem !== '') {
            var value = this.newTodoItem &amp;&amp; this.newTodoItem.trim();
            localStorage.setItem(value, value);
            this.clearInput();
        }
    },
    clearInput() {
        this.newTodoItem = '';
    }
}
</code></pre></div></div>

<p>변경 전의 addTodo()는 만약 인풋 박스에 텍스트를 입력하지 않은 상태에서 [추가] 버튼을 클릭하면 빈 데이터가 로컬 스토리지에 저장되는 문제가 있었습니다. 하지만 위와 같이 예외 처리를 함으로써 빈 데이터나 공백 문자열은 저장되지 않습니다.</p>

<h3 id="디자인-패턴-단일-책임-원칙">디자인 패턴: 단일 책임 원칙</h3>

<p>단일 책임 원칙(Single Responsibility Principle)이란 함수가 하나의 기능만 담당하도록 설계하는 객체 지향 프로그래밍의 디자인 패턴입니다. clearInput()의 <code class="language-plaintext highlighter-rouge">this.newTodoItem = '';</code> 코드를 addTodo() 메서드에 넣어도 되지만 단일 책임 원칙에 따라 할 일 텍스트를 저장하는 코드는 addTodo()에 넣고, 인풋 박스의 내용을 비우는 코드는 clearInput()에 넣습니다. 다른 메서드에서 인풋 박스의 내용을 비우는 코드가 필요할 경우 <code class="language-plaintext highlighter-rouge">this.newTodoItem = '';</code> 코드 대신 <code class="language-plaintext highlighter-rouge">this.clearInput()</code> 을 호출하면 됩니다.</p>

<h3 id="아이콘-이용한-직관적인-버튼-모양">아이콘 이용한 직관적인 버튼 모양</h3>

<p>현재 버튼은 <code class="language-plaintext highlighter-rouge">&lt;button&gt;</code> 태그와 “추가”라는 텍스트를 사용하고 있습니다. 앞에서 설치한 어썸 아이콘의 + 아이콘을 이용해서 더 직관적인 버튼 모양을 만들겠습니다.</p>

<p><code class="language-plaintext highlighter-rouge">&lt;template&gt;</code> 태그에 기존 <code class="language-plaintext highlighter-rouge">&lt;button&gt;</code> 태그를 삭제하고 <code class="language-plaintext highlighter-rouge">&lt;span&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;i&gt;</code> 태그를 아래와 같이 추가합니다.</p>

<h3 id="todoinput-컴포넌트의-template-코드">TodoInput 컴포넌트의 template 코드</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;template&gt;
    &lt;div class="inputBox shadow"&gt;
        &lt;input type="text" v-model="newTodoItem" placeholder="Type what you have to do" v-on:keyup.enter="addTodo"&gt;
        &lt;span class="addContainer" v-on:click="addTodo"&gt;
            &lt;i class="addBtn fas fa-plus" aria-hidden="true"&gt;&lt;/i&gt;
        &lt;/span&gt;
    &lt;/div&gt;
&lt;/template&gt;
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">&lt;template&gt;</code> 변경 내용은 다음과 같습니다.</p>

<ol>
  <li>placeholder: 인풋 박스의 힌트 속성</li>
  <li>v-on:keyup.enter: 인풋 박스에서 엔터를 눌렀을 때 동작하는 속성</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;span&gt;</code> : <code class="language-plaintext highlighter-rouge">&lt;button&gt;</code> 대신 클릭 이벤트를 받을 태그</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;i class="fa fa-plus"&gt;</code> : 어썬 아이콘의 + 아이콘을 추가</li>
</ol>

<h3 id="todoinput-컴포넌트의-css-코드">TodoInput 컴포넌트의 CSS 코드</h3>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nt">style</span> <span class="nt">scoped</span><span class="o">&gt;</span>
    <span class="nt">input</span><span class="nd">:focus</span> <span class="p">{</span>
        <span class="nl">outline</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nc">.inputBox</span> <span class="p">{</span>
        <span class="nl">background</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span>
        <span class="nl">height</span><span class="p">:</span> <span class="m">50px</span><span class="p">;</span>
        <span class="nl">line-height</span><span class="p">:</span> <span class="m">50px</span><span class="p">;</span>
        <span class="nl">border-radius</span><span class="p">:</span> <span class="m">5px</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nc">.inputBox</span> <span class="nt">input</span> <span class="p">{</span>
        <span class="nl">border-style</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
        <span class="nl">font-size</span><span class="p">:</span> <span class="m">0.9rem</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nc">.addContainer</span> <span class="p">{</span>
        <span class="nl">float</span><span class="p">:</span> <span class="nb">right</span><span class="p">;</span>
        <span class="nl">background</span><span class="p">:</span> <span class="n">linear-gradient</span><span class="p">(</span><span class="n">to</span> <span class="nb">right</span><span class="p">,</span> <span class="m">#6478FB</span><span class="p">,</span> <span class="m">#8763FB</span><span class="p">);</span>
        <span class="nl">display</span><span class="p">:</span> <span class="nb">block</span><span class="p">;</span>
        <span class="nl">width</span><span class="p">:</span> <span class="m">3rem</span><span class="p">;</span>
        <span class="nl">border-radius</span><span class="p">:</span> <span class="m">0</span> <span class="m">5px</span> <span class="m">5px</span> <span class="m">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nc">.addBtn</span> <span class="p">{</span>
        <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span>
        <span class="nl">vertical-align</span><span class="p">:</span> <span class="nb">middle</span><span class="p">;</span>
    <span class="p">}</span>
<span class="o">&lt;/</span><span class="nt">style</span><span class="o">&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">&lt;style&gt;</code> 변경 내용은 다음과 같습니다.</p>

<hr />

<p><strong>outline</strong>: 할 일을 입력하는 인풋 박스의 선 스타일 지정</p>

<p><strong>background</strong>: 인풋 박스의 배경색 지정</p>

<p><strong>height</strong>: 인풋 박스의 높이 설정</p>

<p><strong>line-height</strong>: 인풋 박스에 입력되는 텍스트의 중앙 정렬을 위해 설정</p>

<p><strong>border-radius</strong>: 인풋 박스의 둥근 테두리 속성 설정</p>

<p><strong>float</strong>: 할 일 추가 버튼이 표시될 위치 정의</p>

<p><strong>vertical-align</strong>: 할 일 추가 아이콘의 수직 정렬 정의</p>

<hr />

<h3 id="todoinput-컴포넌트의-css-스타일링이-완료된-화면">TodoInput 컴포넌트의 CSS 스타일링이 완료된 화면</h3>

<p><img src="/images/todoinputcss.PNG" alt="todoinputcss" /></p>
:ET