I"<p>제작한 기능에 이어서 사용자 경험을 향상시키는 2가지 기능을 추가로 구현해 보겠습니다. 현재 애플리에키션은 화면이 리액티브하게 동작하기 때문에 할 일을 추가했을 때 목록의 맨 아래에 추가된 아이템이 갑자기 나타납니다. 할 일을 삭제할 때도 마찬가지로 목록에서 아이템이 불쑥 사라지기 때문에 어떤 아이템을 삭제했는지 놓치기 쉽습니다. 또한 할 일에 입력 값이 없는데 + 버튼을 누르거나 엔터키를 누르는 경우 아무 이벤트가 발생하지 않기 때문에 자칫 오류가 있는 애플리케이션으로 착각할 수 있습니다.</p>

<h1 id="뷰-애니메이션">뷰 애니메이션</h1>

<p>뷰 애니메이션은 뷰 프레임워크 자제에서 지원하는 애니메이션 기능으로, 데이터 추가, 변경, 삭제에 대해서 페이드 인(fade in), 페이드 아웃(fade out) 등의 여러가지 애니메이션 효과를 지원합니다. 기타 자바스크립트 애니메이션 라이브러리나 CSS 애니메이션 라이브러리도 같이 사용할 수 있습니다.</p>

<p>TodoList 컴포넌트의 할 일 목록에 애니메이션을 추가하기 위해 <code class="language-plaintext highlighter-rouge">&lt;template&gt;</code> 코드를 약간 변경해 보겠습니다.</p>

<h3 id="todolist-컴포넌트의-template-코드">TodoList 컴포넌트의 <code class="language-plaintext highlighter-rouge">&lt;template&gt;</code> 코드</h3>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;template&gt;</span>
    <span class="nt">&lt;section&gt;</span>
        <span class="nt">&lt;transition-group</span> <span class="na">name=</span><span class="s">"list"</span> <span class="na">tag=</span><span class="s">"ul"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;li</span> <span class="na">v-for=</span><span class="s">"(todoItem, index) in propsdata"</span> <span class="na">:key=</span><span class="s">"todoItem"</span> <span class="na">class=</span><span class="s">"shadow"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">"checkBtn fas fa-check"</span> <span class="na">aria-hidden=</span><span class="s">"true"</span><span class="nt">&gt;&lt;/i&gt;</span>
                
                <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"removeBtn"</span> <span class="na">type=</span><span class="s">"button"</span> <span class="err">@</span><span class="na">click=</span><span class="s">"removeTodo(todoItem, index)"</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">"far fa-trash-alt"</span> <span class="na">aria-hidden=</span><span class="s">"true"</span><span class="nt">&gt;&lt;/i&gt;</span>
                <span class="nt">&lt;/span&gt;</span>
            <span class="nt">&lt;/li&gt;</span>
        <span class="nt">&lt;/transition-group&gt;</span>
    <span class="nt">&lt;/section&gt;</span>
<span class="nt">&lt;/template&gt;</span>
</code></pre></div></div>

<p>기존의 <code class="language-plaintext highlighter-rouge">&lt;ul&gt;</code> 태그를 제거하고 <code class="language-plaintext highlighter-rouge">&lt;transition-group&gt;</code> 태그를 추가합니다. <code class="language-plaintext highlighter-rouge">&lt;transition-group&gt;</code> 은 목록에 애니메이션을 추가할 때 사용되는 태그이며, tag 속성에 애니메이션이 들어갈 HTML 태그 이름(p, ul, section 등등)을 지정하면 됩니다. name 속성은 CSS 클래스와 연관이 있습니다.</p>

<h3 id="key-속성">:key 속성</h3>

<p>뷰는 목록의 특정 아이템이 삭제되거나 추가되었을 때, 돔에서 나머지 아이템의 순서를 다시 조장하지 않고 프레임워크 내부적으로 전체 아이템의 순서를 제어합니다. 이렇게 프레임워크에서 목록 아이템의 순서를 제어하는 이유는 브라우저가 돔을 조작하는 데 소요되는 시간을 최고화하기 위해서입니다.</p>

<p>예를 들어, 돔에서 목록 순서를 제어하는 경우를 살펴보겠습니다. 목록 아이템이 1000개가 있을 때, 두 번쨰 목록 아이템을 지우면 나머지 998개의 아이템이 모두 한 번씩 이동을 해야 합니다. 화면을 다시 그려야하는 브라우저 입장에서는 목록 아이템이 많으면 많을수록 랜더링 부담이 커집니다. 하지만 뷰 프레임워크에서 순서를 제어하는 경우 두 번째 아이템을 삭제했을 때 나머지 목록 아이템을 움직이지 않고, 내부적으로 아이템의 순서만 재조정하여 돔 이동을 최소화합니다. 따라서 브라우저에서 화면을 더 빨리 랜더링할 수 있고 :key 속성을 사용하면 이런 작업을 수행할 수 있습니다.</p>

<p><code class="language-plaintext highlighter-rouge">&lt;transition-group&gt;</code> 태그에 적용할 CSS 속성을 추가하겠습니다.</p>

<h3 id="todolist-컴포넌트에-추가한-css-코드">TodoList 컴포넌트에 추가한 CSS 코드</h3>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nt">style</span> <span class="nt">scoped</span><span class="o">&gt;</span>
    <span class="nc">.list-enter-active</span><span class="o">,</span> <span class="nc">.list-leave-active</span> <span class="p">{</span>
        <span class="nl">transition</span><span class="p">:</span> <span class="n">all</span> <span class="m">1s</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nc">.list-enter</span><span class="o">,</span> <span class="nc">.list-leave-to</span> <span class="p">{</span>
        <span class="nl">opacity</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
        <span class="nl">transform</span><span class="p">:</span> <span class="n">translateY</span><span class="p">(</span><span class="m">30px</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>CSS 속성의 클래스를 보면 모두 앞에서 설정한 name 속성 값(list)을 접두사로 갖고 있습니다. enter-active, leave-active, enter, leave-to는 데이터가 들어오고 나가는 동작을 정의하는 CSS입니다.</p>

<p>CSS 속성을 적용하여 화면을 실행하고 할 일을 추가하거나 삭제하면 할 일 아이템이 부드럽게 들어오고 나가는 애니메이션 동작을 확인할 수 있습니다.</p>

<hr />

<h1 id="뷰-모달">뷰 모달</h1>
:ET